name: launchpad

networks:
  app-net: {}

services:
  # ---- Datastores ----
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [app-net]

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    networks: [app-net]

  maildev:
    image: maildev/maildev:latest
    ports: ["1080:1080", "1025:1025"]
    networks: [app-net]

  # ---- Observability ----
  otel-collector:
    image: otel/opentelemetry-collector:0.98.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./infra/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    ports: ["4317:4317", "4318:4318"]
    depends_on: [prometheus]
    networks: [app-net]

  prometheus:
    image: prom/prometheus:v2.54.1
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
    networks: [app-net]

  grafana:
    image: grafana/grafana:11.1.3
    ports: ["3002:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    depends_on: [prometheus]
    networks: [app-net]

  # ---- API (blue) ----
  api-blue:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=${API_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - API_OTEL_PROM_PORT=${API_OTEL_PROM_PORT}
    expose: ["3001", "9464"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      otel-collector:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"http=require('http'); http.get('http://localhost:3001/health', r=>{process.exit(r.statusCode===200?0:1)}).on('error',()=>process.exit(1))\""
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [app-net]

  # ---- API (green) ----
  api-green:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=${API_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - API_OTEL_PROM_PORT=${API_OTEL_PROM_PORT}
    expose: ["3001", "9464"]
    profiles: ["green"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      otel-collector:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"http=require('http'); http.get('http://localhost:3001/health', r=>{process.exit(r.statusCode===200?0:1)}).on('error',()=>process.exit(1))\""
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [app-net]

  # ---- Web (blue) ----
  web-blue:
    build:
      context: ./apps/web
    environment:
      - NODE_ENV=production
      - PORT=${WEB_PORT}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
    expose: ["3000"]
    depends_on:
      api-blue:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"http=require('http'); http.get('http://localhost:3000', r=>{process.exit(r.statusCode>=200&&r.statusCode<500?0:1)}).on('error',()=>process.exit(1))\""
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [app-net]

  # ---- Web (green) ----
  web-green:
    build:
      context: ./apps/web
    environment:
      - NODE_ENV=production
      - PORT=${WEB_PORT}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
    expose: ["3000"]
    profiles: ["green"]
    depends_on:
      api-green:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"http=require('http'); http.get('http://localhost:3000', r=>{process.exit(r.statusCode>=200&&r.statusCode<500?0:1)}).on('error',()=>process.exit(1))\""
        ]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [app-net]

  # ---- Edge (Nginx) ----
  edge:
    build:
      context: ./edge
    environment:
      - ACTIVE_COLOR=${ACTIVE_COLOR}
    ports:
      - "8080:8080"
    depends_on:
      api-blue:
        condition: service_healthy
      web-blue:
        condition: service_healthy
    restart: unless-stopped
    networks: [app-net]

volumes:
  pgdata:
